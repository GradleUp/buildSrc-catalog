/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.internal.configuration.problems.projectPathFrom
import org.gradle.kotlin.dsl.extra
import org.gradle.kotlin.dsl.invoke

/**
 * A simple 'hello world' plugin.
 */
class PluginsCatalogPlugin : Plugin<Project> {

    override fun apply(target: Project) {

//        println("apply $target")

        val scripts = target.layout.projectDirectory.dir("src/main/kotlin").asFile
                .listFiles { _, name -> name.endsWith(".gradle.kts") }

        val toDelete = target.extra.properties.keys.filter { it.startsWith("script.") }
        for (delete in toDelete)
            target.extra.properties.remove(delete)

        target.tasks {
            named("checkKotlinGradlePluginConfigurationErrors") {
//            named("extractPrecompiledScriptPluginPlugins") {

                doFirst {
                    val plugins: Map<String, String> = target.file("build/catalog/plugins").readText()
                            .split(',').associate {
                                val (acc, id) = it.split('=')
                                val accessor = if ('-' in acc) "`$acc`" else acc
                                "    $accessor" to id
                            }
                    //                    println(plugins)
                    for (script in scripts) {
                        val lines = script.readLines()
                        var any = false
                        var over = false
                        val resolved = buildString {
                            for (line in lines) {
                                //                                println(line)
                                if (line == "}")
                                    over = true
                                if (over)
                                    appendLine(line)
                                else
                                    plugins[line]?.let {
                                        //                                        println("found $it")
                                        any = true
                                        appendLine("    id (\"$it\")")
                                    } ?: appendLine(line)
                            }
                        }
                        if (any) {
                            // cache original
//                            println("cache")
//                            println(script.readText())
                            project.extra["script.${script.name}"] = script.readText()
                            script.writeText(resolved)
                        }
                        //                        println("$script, any: $any")
                        //                        if (any) println(resolved)
                    }
                }
            }
            named("compileKotlin") {
                doLast {
//                    println(project.extra.properties)
                    for (script in scripts)
                        if (project.extra.has("script.${script.name}")) {
                            // restore cache
//                            println("restore")
                            val text = project.extra["script.${script.name}"] as String
                            script.writeText(text)
                        }
                }
            }
        }
    }
}
